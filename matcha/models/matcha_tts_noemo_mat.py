import datetime as dt
import math
import random

import torch

import matcha.utils.monotonic_align as monotonic_align
from matcha import utils


# 注意这里是继承自baselightningmodule_noemo，这里面也写了很多关于模型需要的函数。
from matcha.models.baselightningmodule_noemo import BaseLightningClass
from matcha.models.components.flow_matching_mat import CFM

# 注意这里是没有emo向量想加的textencoder
from matcha.models.components.text_encoder_noemo import TextEncoder
from matcha.utils.model import (
    denormalize,
    duration_loss,
    fix_len_compatibility,
    generate_path,
    sequence_mask,
)

log = utils.get_pylogger(__name__)




# 这里的类是继承自BaseLightningClass，里面写了一些PL所必须的函数
# 继承以后，这里主要实现了init和forward函数，返回loss
class MatchaTTS(BaseLightningClass):  # 🍵
    def __init__(
        self,
        n_vocab,
        n_spks,
        spk_emb_dim,
        n_feats,
        encoder,
        decoder,
        cfm,
        data_statistics,
        out_size,
        optimizer=None,
        scheduler=None,
        prior_loss=True,
        use_precomputed_durations=False,
    ):
        super().__init__()

        self.save_hyperparameters(logger=False)

        self.n_vocab = n_vocab
        self.n_spks = n_spks
        self.spk_emb_dim = spk_emb_dim
        self.n_feats = n_feats
        self.out_size = out_size
        self.prior_loss = prior_loss
        self.use_precomputed_durations = use_precomputed_durations

        if n_spks > 1:
            self.spk_emb = torch.nn.Embedding(n_spks, spk_emb_dim)
        # 文本编码器
        
        self.encoder = TextEncoder(
            encoder.encoder_type,
            encoder.encoder_params,
            encoder.duration_predictor_params,
            n_vocab,
            n_spks,
            spk_emb_dim,
        )
        
        # decoder使用的是CFM进行解码
        self.decoder = CFM(
            in_channels=2 * encoder.encoder_params.n_feats,
            out_channel=encoder.encoder_params.n_feats,
            cfm_params=cfm,
            decoder_params=decoder,
            n_spks=n_spks,
            spk_emb_dim=spk_emb_dim,
        )

        self.update_data_statistics(data_statistics)


    #############----------noemo的---------------#############
    @torch.inference_mode()
    def synthesise(self, x, x_lengths,n_timesteps, temperature=1.0, spks=None, length_scale=1.0):
        """
        Generates mel-spectrogram from text. Returns:
            1. encoder outputs
            2. decoder outputs
            3. generated alignment

        Args:
            x (torch.Tensor): batch of texts, converted to a tensor with phoneme embedding ids.
                shape: (batch_size, max_text_length)
            x_lengths (torch.Tensor): lengths of texts in batch.
                shape: (batch_size,)
            n_timesteps (int): number of steps to use for reverse diffusion in decoder.
            temperature (float, optional): controls variance of terminal distribution.
            spks (bool, optional): speaker ids.
                shape: (batch_size,)
            length_scale (float, optional): controls speech pace.
                Increase value to slow down generated speech and vice versa.

        Returns:
            dict: {
                "encoder_outputs": torch.Tensor, shape: (batch_size, n_feats, max_mel_length),
                # Average mel spectrogram generated by the encoder
                "decoder_outputs": torch.Tensor, shape: (batch_size, n_feats, max_mel_length),
                # Refined mel spectrogram improved by the CFM
                "attn": torch.Tensor, shape: (batch_size, max_text_length, max_mel_length),
                # Alignment map between text and mel spectrogram
                "mel": torch.Tensor, shape: (batch_size, n_feats, max_mel_length),
                # Denormalized mel spectrogram
                "mel_lengths": torch.Tensor, shape: (batch_size,),
                # Lengths of mel spectrograms
                "rtf": float,
                # Real-time factor
        """
        # For RTF computation
        t = dt.datetime.now()

        if self.n_spks > 1:
            # Get speaker embedding
            spks = self.spk_emb(spks.long())
        # print(f"x的设备{x.device}")
        
        # Get encoder_outputs `mu_x` and log-scaled token durations `logw`
        # 得到编码器输出mu_x和duration的token长度的对数缩放logw
        mu_x, logw, x_mask = self.encoder(x, x_lengths, spks)
        # print("textencoderd的结束输出--mu", mu_x.shape)
        # print("textencoderd的结束输出--logw", logw.shape)
        # print("textencoderd的结束输出--x_mask", x_mask.shape)
        w = torch.exp(logw) * x_mask
        
        w_ceil = torch.ceil(w) * length_scale

        y_lengths = torch.clamp_min(torch.sum(w_ceil, [1, 2]), 1).long()

        y_max_length = y_lengths.max()
        y_max_length_ = fix_len_compatibility(y_max_length)

        # Using obtained durations `w` construct alignment map `attn`
        y_mask = sequence_mask(y_lengths, y_max_length_).unsqueeze(1).to(x_mask.dtype)
        # 
        attn_mask = x_mask.unsqueeze(-1) * y_mask.unsqueeze(2)
        
        attn = generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1)).unsqueeze(1)

        # Align encoded text and get mu_y
        mu_y = torch.matmul(attn.squeeze(1).transpose(1, 2), mu_x.transpose(1, 2))
        mu_y = mu_y.transpose(1, 2)
        encoder_outputs = mu_y[:, :, :y_max_length]

        # Generate sample tracing the probability flow
        # 生成概率流
        decoder_outputs = self.decoder(mu_y, y_mask, n_timesteps, temperature, spks)
        # 
        decoder_outputs = decoder_outputs[:, :, :y_max_length]
        # 实时音频频率（RTF）
        t = (dt.datetime.now() - t).total_seconds()
        rtf = t * 22050 / (decoder_outputs.shape[-1] * 256)

        return {
            "encoder_outputs": encoder_outputs,
            "decoder_outputs": decoder_outputs,
            "attn": attn[:, :, :y_max_length],
            "mel": denormalize(decoder_outputs, self.mel_mean, self.mel_std),
            "mel_lengths": y_lengths,
            "rtf": rtf,
        }

    def forward(self, x, x_lengths, y, y_lengths, spks=None, out_size=None, cond=None, durations=None):

        """
        Computes 3 losses:
            1. duration loss: loss between predicted token durations and those extracted by Monotinic Alignment Search (MAS).

            2. prior loss: loss between mel-spectrogram and encoder outputs.
            
            3. flow matching loss: loss between mel-spectrogram and decoder outputs.

        Args:
            x (torch.Tensor): batch of texts, converted to a tensor with phoneme embedding ids.
                shape: (batch_size, max_text_length)
            x_lengths (torch.Tensor): lengths of texts in batch.
                shape: (batch_size,)
            y (torch.Tensor): batch of corresponding mel-spectrograms.
                shape: (batch_size, n_feats, max_mel_length)
            y_lengths (torch.Tensor): lengths of mel-spectrograms in batch.
                shape: (batch_size,)
            out_size (int, optional): length (in mel's sampling rate) of segment to cut, on which decoder will be trained.
                Should be divisible by 2^{num of UNet downsamplings}. Needed to increase batch size.
            spks (torch.Tensor, optional): speaker ids.
                shape: (batch_size,)
        """
        # print('matchaTTS的encoder')
        # 这里是B*64
        if self.n_spks > 1:
            # Get speaker embedding
            spks = self.spk_emb(spks)

        # Get encoder_outputs `mu_x` and log-scaled token durations `logw`
        # 得到的是mu_x, logw, x_mask
        # mu:是text的特征80维,logw:时长预测，时长预测模块得到,这里的时长改变,可以加一些东西 x_mask:掩码
        mu_x, logw, x_mask = self.encoder(x, x_lengths,spks)
        # print('mu_x，音音素进行编码',mu_x.shape)
        # print('logw，编码厚度时长',logw.shape)
        
        y_max_length = y.shape[-1]
        # print('y_max_length，y的长度',y_max_length)
        # [4, 1, 512]
        # 计算y的mask
        y_mask = sequence_mask(y_lengths, y_max_length).unsqueeze(1).to(x_mask)
        # [4, 1, 105, 512]
        # 生成一个注意力掩码张量，用于在多头注意力机制中屏蔽无效的位置,两边都有效的才有效
        attn_mask = x_mask.unsqueeze(-1) * y_mask.unsqueeze(2)#[3, 1, 149, 512]

        if self.use_precomputed_durations:
            # 如果使用预计算的时长
            attn = generate_path(durations.squeeze(1), attn_mask.squeeze(1))
        else:
            # vits使用的也是这个对齐的时长
            # Use MAS to find most likely alignment `attn` between text and mel-spectrogram
            # 使用 MAS 寻找文本与梅尔频谱图之间最可能的对齐图
            with torch.no_grad():
                # 计算高斯分布对数似然的一部分
                # 计算一个常数项 const，用于对数似然的计算。这里使用的是高斯分布的对数似然公式的一部分。
                const = -0.5 * math.log(2 * math.pi) * self.n_feats
                # 创建一个与 mu_x 形状相同的张量 factor，并将所有元素设置为 -0.5。这个张量用于简化后续的计算
                factor = -0.5 * torch.ones(mu_x.shape, dtype=mu_x.dtype, device=mu_x.device)
                # 计算张量 y 的平方与张量 factor 的特定组合的点积（dot product）
                y_square = torch.matmul(factor.transpose(1, 2), y**2)
                # 这一行代码的作用是计算张量 mu_x 与 y 的交互项
                y_mu_double = torch.matmul(2.0 * (factor * mu_x).transpose(1, 2), y)
                # 这一行代码的作用是计算张量 mu_x 的平方与张量 factor 的点积，并对结果进行求和
                mu_square = torch.sum(factor * (mu_x**2), 1).unsqueeze(-1)
                # 公式得到一个log_prior：[batch_size, seq_length_x, seq_length_y]
                log_prior = y_square - y_mu_double + mu_square + const
                # 作者自己写的对其包？？？没看
                # 使用 monotonic_align.maximum_path 函数计算对齐图 attn。
                # 这个函数使用动态规划算法来找到最有可能的对齐图
                # 这里是关键的MAS的部分
                attn = monotonic_align.maximum_path(log_prior, attn_mask.squeeze(1))
                # 得到了一个对齐图
                attn = attn.detach()  # b, t_text, T_mel

        # print("attn:",attn)
        # Compute loss between predicted log-scaled durations and those obtained from MAS
        # refered to as prior loss in the paper
        # 先验损失（prior loss）这里计算出来的是MAS的损失
        logw_ = torch.log(1e-8 + torch.sum(attn.unsqueeze(1), -1)) * x_mask

        # 计算时长损失，得到了第一个损失，把文本编码器的预测时长与MAS得到的时长进行比较
        # 时长损失是通过MAS的对齐图得到的
        # duration loss: loss between predicted token durations and those extracted by Monotinic Alignment Search (MAS).
        dur_loss = duration_loss(logw, logw_, x_lengths)

        # 裁剪mel谱，以减少内存占用
        # Cut a small segment of mel-spectrogram in order to increase batch size
        #   - "Hack" taken from Grad-TTS, in case of Grad-TTS, we cannot train batch size 32 on a 24GB GPU without it
        #   - Do not need this hack for Matcha-TTS, but it works with it as well
        if not isinstance(out_size, type(None)):
            max_offset = (y_lengths - out_size).clamp(0)
            offset_ranges = list(zip([0] * max_offset.shape[0], max_offset.cpu().numpy()))
            out_offset = torch.LongTensor(
                [torch.tensor(random.choice(range(start, end)) if end > start else 0) for start, end in offset_ranges]
            ).to(y_lengths)
            attn_cut = torch.zeros(attn.shape[0], attn.shape[1], out_size, dtype=attn.dtype, device=attn.device)
            y_cut = torch.zeros(y.shape[0], self.n_feats, out_size, dtype=y.dtype, device=y.device)

            y_cut_lengths = []
            for i, (y_, out_offset_) in enumerate(zip(y, out_offset)):
                y_cut_length = out_size + (y_lengths[i] - out_size).clamp(None, 0)
                y_cut_lengths.append(y_cut_length)
                cut_lower, cut_upper = out_offset_, out_offset_ + y_cut_length
                y_cut[i, :, :y_cut_length] = y_[:, cut_lower:cut_upper]
                attn_cut[i, :, :y_cut_length] = attn[i, :, cut_lower:cut_upper]

            y_cut_lengths = torch.LongTensor(y_cut_lengths)
            y_cut_mask = sequence_mask(y_cut_lengths).unsqueeze(1).to(y_mask)

            attn = attn_cut
            # y是什么呀？
            y = y_cut
            y_mask = y_cut_mask

        # print("attn的shape",attn.shape)
        # print("mu_x的shape",mu_x.shape)
        # Align encoded text with mel-spectrogram and get mu_y segment
        # 计算注意力权重矩阵与mu_x的转置矩阵的矩阵乘积，得到mu_y，也就是一个大致的mel谱????
        mu_y = torch.matmul(attn.squeeze(1).transpose(1, 2), mu_x.transpose(1, 2))

        # print("mu_y的shape",mu_y.shape)
        mu_y = mu_y.transpose(1, 2)
        # print("mu_y的shape",mu_y.shape)

        # Compute loss of the decoder
        # 这是计算CFM的loss，这里就是梯度下降的公式，CFM的公式
        # mu_y输入进去，得到y，然后计算y和mu_y之间的差异，进行学习
        # print("mu_y,已经经过encoder的处理",mu_y.shape)#
        # print("y，是输入的mel谱？？，输入的mel谱",y.shape)
        # print("y_mask，掩码有效性",y_mask.shape)#batch*mel维度*长度
        # print("spks说话人信息",spks.shape)#batch
        # print("cond条件",cond)
        # 输入进去的都是啥、
        # 在这一步时，如果使用shortcut的话需要专门写shortcut的移动方法来计算损失
        diff_loss, _ = self.decoder.compute_loss(x1=y, mask=y_mask, mu=mu_y, spks=spks, cond=cond)
        # 默认是true
        if self.prior_loss:
            prior_loss = torch.sum(0.5 * ((y - mu_y) ** 2 + math.log(2 * math.pi)) * y_mask)
            # print('损失计算，和损失返回是分开的，这不知道是lighting的写法还是pytorch的写法')
            prior_loss = prior_loss / (torch.sum(y_mask) * self.n_feats)
        else:
            prior_loss = 0

        return dur_loss, prior_loss, diff_loss, attn
